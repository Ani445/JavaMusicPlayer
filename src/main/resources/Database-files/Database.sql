
# drop table if exists GENRE_SONG;
drop table if exists SONG_ARTIST;
drop table if exists SONGS_IN_PLAYLIST;
# drop table if exists GENRE;
drop table if exists SONG;
drop table if exists ALBUM;
drop table if exists ARTIST;
drop table if exists PLAYLIST;
drop table if exists USER;
drop table if exists last_ids;

CREATE TABLE USER
(
    USERNAME    VARCHAR(35),
    PASSWORD    VARCHAR(35) NOT NULL,
    FIRST_NAME  VARCHAR(15),
    LAST_NAME   VARCHAR(15),
    JOIN_DATE   DATE,
    CONSTRAINT USER_PK PRIMARY KEY (USERNAME)
);

CREATE TABLE PLAYLIST
(
    PLAYLIST_ID         VARCHAR(5),
    NAME                VARCHAR(60),
    USERNAME            VARCHAR(35),

    CONSTRAINT PLAYLIST_PK PRIMARY KEY (PLAYLIST_ID),

    CONSTRAINT PLAYLIST_FK FOREIGN KEY (USERNAME)
        REFERENCES USER(USERNAME)
            ON DELETE CASCADE
);

CREATE TABLE ARTIST
(
    ARTIST_ID   VARCHAR(5),
    FIRST_NAME  VARCHAR(15),
    LAST_NAME   VARCHAR(15),

    CONSTRAINT ARTIST_PK PRIMARY KEY (ARTIST_ID)
);

# CREATE TABLE GENRE
# (
#     GENRE_ID VARCHAR(5),
#     NAME VARCHAR(5) NOT NULL,
#     CONSTRAINT GENRE_PK PRIMARY KEY (GENRE_ID)
# );

CREATE TABLE ALBUM
(
    ALBUM_ID          VARCHAR(5),
    NAME        VARCHAR(40),
    ARTIST_ID   VARCHAR(5),
    CONSTRAINT ALBUM_PK PRIMARY KEY (ALBUM_ID),
    CONSTRAINT ALBUM_FK FOREIGN KEY (ARTIST_ID)
        REFERENCES ARTIST(ARTIST_ID)
            ON DELETE SET NULL
            ON UPDATE CASCADE
);

CREATE TABLE SONG
(
    SONG_ID     VARCHAR(5),
    NAME        VARCHAR(60) NOT NULL,
#     DURATION    INT,  #in seconds
    PATH        VARCHAR(100) NOT NULL,
    ALBUM_ID    VARCHAR(5),
#     Genre_ID    VARCHAR(5),

    CONSTRAINT SONG_PK PRIMARY KEY (SONG_ID),

    CONSTRAINT SONG_FK FOREIGN KEY (ALBUM_ID)
        REFERENCES ALBUM(ALBUM_ID)
            ON DELETE SET NULL
            ON UPDATE CASCADE
);

####################### Junction Tables ###########################

CREATE TABLE SONGS_IN_PLAYLIST
(
    SONG_ID         VARCHAR(5),
    PLAYLIST_ID     VARCHAR(5),

    CONSTRAINT SONGS_IN_PLAYLIST_PK PRIMARY KEY (SONG_ID, PLAYLIST_ID),

    CONSTRAINT SONGS_IN_PLAYLIST_FK1 FOREIGN KEY (SONG_ID)
        REFERENCES SONG(SONG_ID)
            ON UPDATE CASCADE
            ON DELETE CASCADE,
    CONSTRAINT SONGS_IN_PLAYLIST_FK2 FOREIGN KEY (PLAYLIST_ID)
        REFERENCES PLAYLIST(PLAYLIST_ID)
            ON UPDATE CASCADE
            ON DELETE CASCADE
);

CREATE TABLE SONG_ARTIST
(
    SONG_ID         VARCHAR(5),
    ARTIST_ID       VARCHAR(5),
#     IS_FEATURED     BOOL, # 1 for featured, 0 for owner.
    CONSTRAINT SONG_ARTIST_PK PRIMARY KEY (SONG_ID, ARTIST_ID),
    CONSTRAINT SONG_ARTIST_FK1 FOREIGN KEY (SONG_ID)
        REFERENCES SONG(SONG_ID)
            ON UPDATE CASCADE
            ON DELETE CASCADE,
    CONSTRAINT SONG_ARTIST_FK2 FOREIGN KEY (ARTIST_ID)
        REFERENCES ARTIST(ARTIST_ID)
            ON UPDATE CASCADE
            ON DELETE CASCADE
);

# CREATE TABLE GENRE_SONG
# (
#     SONG_ID VARCHAR(5),
#     GENRE_ID VARCHAR(5),
#
#     CONSTRAINT GENRE_SONG_PK  PRIMARY KEY (SONG_ID, GENRE_ID),
#
#     CONSTRAINT SONG_GENRE_FK1 FOREIGN KEY (SONG_ID)
#         REFERENCES SONG(SONG_ID)
#             ON UPDATE CASCADE
#             ON DELETE CASCADE,
#     CONSTRAINT SONG_GENRE_FK2 FOREIGN KEY (GENRE_ID)
#         REFERENCES GENRE(GENRE_ID)
#             ON UPDATE CASCADE
#             ON DELETE CASCADE
# );

CREATE TABLE LAST_IDS
(
    TABLE_NAME VARCHAR(10) PRIMARY KEY,
    LAST_ID INT
);

INSERT INTO LAST_IDS VALUES ('SONG', 0);
INSERT INTO LAST_IDS VALUES ('PLAYLIST', 0);
INSERT INTO LAST_IDS VALUES ('ARTIST', 0);
INSERT INTO LAST_IDS VALUES ('ALBUM', 0);
# INSERT INTO LAST_IDS VALUES ('GENRE', 0);


drop function if exists GET_ID;

DELIMITER //

CREATE FUNCTION GET_ID(TABLE_NAME VARCHAR(10))
RETURNS VARCHAR(5) DETERMINISTIC
BEGIN
    DECLARE
        LI VARCHAR(5);
    SELECT LAST_ID FROM LAST_IDS
        WHERE LAST_IDS.TABLE_NAME = TABLE_NAME
        INTO LI;
    RETURN LI;
END //

DELIMITER ;

#TRIGGERS

drop trigger if exists GEN_SONG_ID;

DELIMITER //

CREATE TRIGGER GEN_SONG_ID
    BEFORE INSERT ON SONG
    FOR EACH ROW
BEGIN
    DECLARE
        ID INT;
    SELECT GET_ID('SONG') FROM DUAL INTO ID;
    SET ID = ID + 1;
    SET NEW.SONG_ID = CAST(ID AS CHAR);
    UPDATE LAST_IDS SET LAST_IDS.LAST_ID = ID WHERE LAST_IDS.TABLE_NAME = 'SONG';
END //

DELIMITER ;


drop trigger if exists GEN_ARTIST_ID;

DELIMITER //

CREATE TRIGGER GEN_ARTIST_ID
    BEFORE INSERT ON ARTIST
    FOR EACH ROW
BEGIN
    DECLARE
        ID INT;
    SELECT GET_ID('ARTIST') FROM DUAL INTO ID;
    SET ID = ID + 1;
    SET NEW.ARTIST_ID = CAST(ID AS CHAR);
    UPDATE LAST_IDS SET LAST_IDS.LAST_ID = ID WHERE LAST_IDS.TABLE_NAME = 'ARTIST';
END //

DELIMITER ;

drop trigger if exists GEN_ALBUM_ID;

DELIMITER //

CREATE TRIGGER GEN_ALBUM_ID
    BEFORE INSERT ON ALBUM
    FOR EACH ROW
BEGIN
    DECLARE
        ID INT;
    SELECT GET_ID('ALBUM') FROM DUAL INTO ID;
    SET ID = ID + 1;
    SET NEW.ALBUM_ID = CAST(ID AS CHAR);
    UPDATE LAST_IDS SET LAST_IDS.LAST_ID = ID WHERE LAST_IDS.TABLE_NAME = 'ALBUM';
END //

DELIMITER ;


# drop trigger if exists GEN_GENRE_ID;
#
# DELIMITER //
#
# CREATE TRIGGER GEN_GENRE_ID
#     BEFORE INSERT ON GENRE
#     FOR EACH ROW
# BEGIN
#     DECLARE
#         ID INT;
#     SELECT GET_ID('GENRE') FROM DUAL INTO ID;
#     SET ID = ID + 1;
#     SET NEW.GENRE_ID = CAST(ID AS CHAR);
#     UPDATE LAST_IDS SET LAST_IDS.LAST_ID = ID WHERE LAST_IDS.TABLE_NAME = 'GENRE';
# END //

DELIMITER ;


drop trigger if exists GEN_PLAYLIST_ID;

DELIMITER //

CREATE TRIGGER GEN_PLAYLIST_ID
    BEFORE INSERT ON PLAYLIST
    FOR EACH ROW
BEGIN
    DECLARE
        ID INT;
    SELECT GET_ID('PLAYLIST') FROM DUAL INTO ID;
    SET ID = ID + 1;
    SET NEW.PLAYLIST_ID = CAST(ID AS CHAR);
    UPDATE LAST_IDS SET LAST_IDS.LAST_ID = ID WHERE LAST_IDS.TABLE_NAME = 'PLAYLIST';
END //

DELIMITER ;

drop trigger if exists INSERT_DATE;
    DELIMITER //
CREATE TRIGGER INSERT_DATE
    BEFORE INSERT ON USER
    FOR EACH ROW
BEGIN
    SET NEW.JOIN_DATE = SYSDATE();
END //
    DELIMITER ;

#
# SELECT Concat('DROP TRIGGER ', Trigger_Name, ';') FROM  information_schema.TRIGGERS WHERE TRIGGER_SCHEMA = 'PHOENIX';
# DROP TRIGGER GEN_SONG_ID;
# DROP TRIGGER GEN_ALBUM_ID;
# DROP TRIGGER GEN_GENRE_ID;
# DROP TRIGGER GEN_PLAYLIST_ID;
# DROP TRIGGER GEN_ARTIST_ID;